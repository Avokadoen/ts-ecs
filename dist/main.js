!function(t){var e={};function n(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,s){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(s,i,function(e){return t[e]}.bind(null,i));return s},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var s;n.r(e),n.d(e,"EntityBuilder",(function(){return i})),n.d(e,"ECSManager",(function(){return o})),function(t){t[t.FIRST=0]="FIRST",t[t.AND=1]="AND",t[t.OR=2]="OR"}(s||(s={}));class i{constructor(t,e){this.id=t,this.ecsManager=e}get entityId(){return this.id}addComponent(t){return this.ecsManager.addComponent(this.id,t)}}class o{constructor(){this.events=[],this.systems=[],this.entities=[],this.components=new Map,this.entityId=0}registerEvent(t,e){return this.events.push({qResult:this.queryComponents(e),system:t}),this.events.length-1}registerSystem(t,e){this.systems.push({qResult:this.queryComponents(e),system:t})}createEntity(){return this.entities.push({id:this.entityId++}),new i(this.entityId-1,this)}createEntityWithComponents(t){const e=this.createEntity();for(const n of t)this.addComponent(e.entityId,n);return new i(this.entityId-1,this)}addComponent(t,e){const n=e.identifier();this.components.has(n)||this.components.set(n,new Array);const s={entityId:t,data:e};return this.components.get(n).push(s),new i(t,this)}queryEntities(t){const e=(t,e)=>(t.find(t=>t.id===e.entityId)||t.push({id:e.entityId}),t);let n=[];for(const i of t){const t=this.components.get(i.componentIdentifier).filter(t=>!isNaN(t.entityId)).reduce(e,[]);switch(i.token){case s.FIRST:n=t;break;case s.AND:const e=t.length<n.length?t:n,i=t.length>=n.length?t:n;n=[];for(const t of e)i.find(e=>e===t)&&n.push(t);break;case s.OR:n=n.concat(t).reduce((t,e)=>(t.find(t=>t.id===e.id)||t.push(e),t),[])}}return n}queryComponents(t){const e=t.reduce((t,e)=>(t.find(t=>t===e.componentIdentifier)||t.push(e.componentIdentifier),t),[]),n=this.queryEntities(t),s={entities:[]};for(const t of e)for(const e of n){const n=this.components.get(t).findIndex(t=>t.entityId===e);if(n>=0){let i=s.entities.findIndex(t=>t.entity.id===e.id);-1===i&&(s.entities.push({entity:e,components:new Map}),i=s.entities.length-1),s.entities.find(t=>t.entity.id===e.id).components.set(t,n)}}return s}createArgs(t){const e=[];for(const n of t.components){const t=this.components.get(n[0])[n[1]];e.push(t)}return e}onEvent(t,e){for(const n of this.events[t].qResult.entities){const s=this.createArgs(n);this.events[t].system(e,s)}}dispatch(){this.prevRun=this.prevRun?this.prevRun:Date.now();const t=Date.now(),e=(t-this.prevRun)/1e3;for(const t of this.systems)for(const n of t.qResult.entities){const s=this.createArgs(n);t.system(e,s)}this.prevRun=t}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,